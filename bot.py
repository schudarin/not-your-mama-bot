# -*- coding: utf-8 -*-
import os
import re
import logging
import json
from typing import Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # –ï—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –≤—Ä—É—á–Ω—É—é
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters
)
from duckduckgo_search import DDGS
from openai import AsyncOpenAI
import requests

# ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
log = logging.getLogger("mrazz-bot")

# ‚îÄ‚îÄ‚îÄ –ö–û–ù–§–ò–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TG_TOKEN     = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY   = os.getenv("OPENAI_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME", "").lstrip("@")

openai = AsyncOpenAI(api_key=OPENAI_KEY)

# –ü–µ—Ä—Å–æ–Ω–∞ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)
DEFAULT_STYLE = (
    "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
    "–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ –¥–µ–ª—É. "
    "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º. "
    "–ö—Ä–∞—Ç–∫–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è, –Ω–æ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
)

# –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPER_ADMIN_ID = None  # ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS_FILE = "/opt/not-your-mama-bot/logs/admins.json"

def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global ADMIN_IDS, SUPER_ADMIN_ID
    try:
        if os.path.exists(ADMINS_FILE):
            with open(ADMINS_FILE, 'r') as f:
                data = json.load(f)
                ADMIN_IDS = set(data.get('admin_ids', []))
                SUPER_ADMIN_ID = data.get('super_admin_id')
                log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

def save_admins():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        data = {
            'admin_ids': list(ADMIN_IDS),
            'super_admin_id': SUPER_ADMIN_ID
        }
        with open(ADMINS_FILE, 'w') as f:
            json.dump(data, f)
        log.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_admins()

STYLES = {}  # chat_id -> system prompt (–∂–∏–≤—ë—Ç –≤ –ø–∞–º—è—Ç–∏; –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—É—Å—Ç–æ)

MAX_CHUNK = 4000  # –ø—Ä–µ–¥–µ–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥–∏ (~4096)

# ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def chunk_text(s: str, n: int = MAX_CHUNK):
    return (s[i:i+n] for i in range(0, len(s), n))

def web_search(query: str, num: int = 5) -> Optional[str]:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo"""
    try:
        with DDGS() as ddgs:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ news search - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
            results = list(ddgs.news(query, max_results=num))
            
            if not results:
                return None
                
            lines = []
            for r in results[:num]:
                title = r.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                link = r.get("href", "")
                snippet = (r.get("body") or "")[:150]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                if len(snippet) == 150:
                    snippet += "..."
                lines.append(f"‚Ä¢ [{title}]({link}) ‚Äî {snippet}")
            return "\n".join(lines)
            
    except Exception as e:
        log.warning(f"Search error: {e}")
        return None

async def send_reply(msg, text: str):
    for ch in chunk_text(text):
        await msg.reply_text(ch, reply_to_message_id=msg.message_id, disable_web_page_preview=False)

# ‚îÄ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    global SUPER_ADMIN_ID
    if SUPER_ADMIN_ID is None:
        SUPER_ADMIN_ID = user_id
        ADMIN_IDS.add(user_id)
        save_admins()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        log.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {username} (ID: {user_id})")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /start")
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in ADMIN_IDS:
        admin_commands = """
üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
/style - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –±–æ—Ç–∞
/update - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
"""
    else:
        admin_commands = ""
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî {BOT_USERNAME}. ü§ñ\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–π –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ ¬´–º—Ä–∞–∑—å¬ª\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞: ¬´–≥—É–≥–ª–∏¬ª, ¬´–Ω–∞–π–¥–∏¬ª, ¬´–ø–æ–∏—Å–∫¬ª, ¬´–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ¬ª\n"
        "‚Ä¢ /style - –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–π —Å—Ç–∏–ª—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
        "‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        f"üí¨ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {admin_commands}"
    )

async def cmd_style(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_style = STYLES.get(chat_id, DEFAULT_STYLE)
    
    style = " ".join(ctx.args).strip()
    if not style:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        await update.message.reply_text(
            f"üé≠ –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n"
            f"¬´{current_style}¬ª\n\n"
            f"üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"/style <–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è>\n\n"
            f"üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ /style –¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n"
            f"‚Ä¢ /style –¢—ã ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç\n"
            f"‚Ä¢ /style –¢—ã ‚Äî –≥—Ä—É–±—ã–π –¥–µ–≤–æ–ø—Å-–∏–Ω–∂–µ–Ω–µ—Ä"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
    STYLES[chat_id] = style
    await update.message.reply_text(
        f"‚úÖ –°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n"
        f"üé≠ –ù–æ–≤—ã–π —Å—Ç–∏–ª—å:\n"
        f"¬´{style}¬ª"
    )

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def cmd_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        return await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.effective_chat.type != "private":
        return await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    
    args = ctx.args
    if not args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_list = []
        for admin_id in ADMIN_IDS:
            if admin_id == SUPER_ADMIN_ID:
                admin_list.append(f"üëë {admin_id} (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)")
            else:
                admin_list.append(f"üîß {admin_id}")
        
        await update.message.reply_text(
            f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            f"{chr(10).join(admin_list)}\n\n"
            f"üí° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            f"‚Ä¢ /admin add <ID> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"‚Ä¢ /admin remove <ID> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"‚Ä¢ /admin list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ (—Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞)"
        )
        return
    
    action = args[0].lower()
    
    if action == "list":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_list = []
        for admin_id in ADMIN_IDS:
            if admin_id == SUPER_ADMIN_ID:
                admin_list.append(f"üëë {admin_id} (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)")
            else:
                admin_list.append(f"üîß {admin_id}")
        
        await update.message.reply_text(
            f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            f"{chr(10).join(admin_list)}"
        )
    
    elif action == "add":
        if len(args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin add <ID>")
            return
        
        try:
            new_admin_id = int(args[1])
            if new_admin_id in ADMIN_IDS:
                await update.message.reply_text("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                return
            
            ADMIN_IDS.add(new_admin_id)
            save_admins()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    elif action == "remove":
        if len(args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin remove <ID>")
            return
        
        try:
            remove_admin_id = int(args[1])
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if remove_admin_id == SUPER_ADMIN_ID:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            if remove_admin_id not in ADMIN_IDS:
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return
            
            ADMIN_IDS.remove(remove_admin_id)
            save_admins()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {remove_admin_id} —É–¥–∞–ª–µ–Ω")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /admin add <ID> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /admin remove <ID> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /admin list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        )

async def cmd_update(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        return await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.effective_chat.type != "private":
        return await update.message.reply_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    
    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...")
    
    try:
        import subprocess
        import asyncio
        
        import os
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        current_dir = os.getcwd()
        opt_exists = os.path.exists("/opt/not-your-mama-bot/bot.py")
        
        log.info(f"–û—Ç–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: current_dir={current_dir}, opt_exists={opt_exists}")
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º systemd —É—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if opt_exists:
            # Systemd —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            update_script = "/opt/not-your-mama-bot/scripts/update.sh"
            working_dir = "/opt/not-your-mama-bot"
            log.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º systemd —É—Å—Ç–∞–Ω–æ–≤–∫—É: {update_script}")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            update_script = "./scripts/update.sh"
            working_dir = current_dir
            log.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É: {update_script}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(update_script):
            error_msg = f"‚ùå –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {update_script}"
            log.error(error_msg)
            await update.message.reply_text(error_msg)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        process = await asyncio.create_subprocess_exec(
            update_script,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=working_dir
        )
        
        stdout, stderr = await process.communicate()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        stdout_text = stdout.decode('utf-8', errors='ignore')
        stderr_text = stderr.decode('utf-8', errors='ignore')
        
        log.info(f"Update script return code: {process.returncode}")
        log.info(f"Update script stdout: {stdout_text}")
        if stderr_text:
            log.error(f"Update script stderr: {stderr_text}")
        
        if process.returncode == 0:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            if len(stdout_text) > 3000:
                stdout_text = stdout_text[:3000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
            await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n{stdout_text}")
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–∫–æ–¥: {process.returncode}):\n"
            if stderr_text:
                error_msg += stderr_text
            else:
                error_msg += stdout_text
            await update.message.reply_text(error_msg)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

# ‚îÄ‚îÄ‚îÄ –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg        = update.message
    if not msg or not msg.text:
        return
    text       = msg.text.strip()
    text_lower = text.lower()

    # 1) –¢–†–ò–ì–ì–ï–† –ü–û–ò–°–ö–ê (—Å—Ç–∞–≤–∏–º —Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    # –ª–æ–≤–∏–º ¬´–∏–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–µ—Ç—å/–ø–æ–∏—Å–∫/–≥—É–≥–ª/–≥—É–≥–ª–∏/–≥—É–≥–ª–∏—Ç—å/–Ω–∞–π–¥–∏‚Ä¶¬ª
    if re.search(r"(–∏–Ω—Ç–µ—Ä–Ω–µ—Ç|—Å–µ—Ç—å|–ø–æ–∏—Å–∫|–≥—É–≥–ª(–∏|—è|–∏—Ç—å)?|–ø–æ–≥—É–≥–ª(–∏|—è|–∏—Ç—å)?|–Ω–∞–π–¥)", text_lower):
        query = text  # –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø–∞—Ä—Å–µ—Ä, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        results_md = web_search(query)
        
        if not results_md:
            return await send_reply(msg, "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        # –°–∞–º–º–∞—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ OpenAI
        try:
            summary_resp = await openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system",
                     "content": "–¢–µ–±–µ –¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å—Å—ã–ª–∫–∞, —Å–Ω–∏–ø–ø–µ—Ç). –ö—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–∏—Ä—É–π –ø–æ-—Ä—É—Å—Å–∫–∏ —Å 2‚Äì5 –ø—É–Ω–∫—Ç–∞–º–∏ –∏ –≤—ã–≤–æ–¥–æ–º."},
                    {"role": "user",
                     "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:\n\n{results_md}"}
                ],
                temperature=0.5,
            )
            summary = summary_resp.choices[0].message.content
        except Exception as e:
            log.warning("OpenAI summary error: %s", e)
            return await send_reply(msg, "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        return await send_reply(msg, f"üîç –ö—Ä–∞—Ç–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n{summary}")

    # 2) –¢–†–ò–ì–ì–ï–† –û–ë–´–ß–ù–û–ì–û –û–¢–í–ï–¢–ê
    is_reply_to_bot = (
        msg.reply_to_message and msg.reply_to_message.from_user
        and msg.reply_to_message.from_user.username == BOT_USERNAME
    )
    if msg.chat.type != "private" and not (
        f"@{BOT_USERNAME}".lower() in text_lower
        or "–º—Ä–∞–∑—å" in text_lower
        or is_reply_to_bot
    ):
        return

    # —á–∏—Å—Ç–∏–º —Å–ª—É–∂–µ–±–Ω–æ–µ
    prompt = re.sub(fr"@{re.escape(BOT_USERNAME)}|–º—Ä–∞–∑—å", "", text, flags=re.IGNORECASE).strip()
    system = STYLES.get(msg.chat.id, DEFAULT_STYLE)

    # 3) –í—ã–∑–æ–≤ OpenAI
    try:
        resp = await openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system},
                {"role": "user",   "content": prompt or "–û—Ç–≤–µ—á–∞–π –≤ —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ."},
            ],
            temperature=0.7,
        )
        answer = resp.choices[0].message.content
    except Exception as e:
        log.warning("OpenAI chat error: %s", e)
        return await send_reply(msg, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –ø–æ—á–∏–Ω—é—Å—å.")

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply
    await send_reply(msg, answer)

# ‚îÄ‚îÄ‚îÄ –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = ApplicationBuilder().token(TG_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("style", cmd_style))
    app.add_handler(CommandHandler("ping",  cmd_ping))
    app.add_handler(CommandHandler("admin", cmd_admin))
    app.add_handler(CommandHandler("update", cmd_update))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    log.info("Bot is up as @%s", BOT_USERNAME)
    app.run_polling()

if __name__ == "__main__":
    main()
